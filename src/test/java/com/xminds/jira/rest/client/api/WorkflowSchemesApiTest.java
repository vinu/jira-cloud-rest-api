/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.xminds.jira.rest.client.api;

import com.xminds.jira.rest.client.ApiException;
import com.xminds.jira.rest.client.model.DefaultWorkflow;
import com.xminds.jira.rest.client.model.IssueTypeWorkflowMapping;
import com.xminds.jira.rest.client.model.IssueTypesWorkflowMapping;
import com.xminds.jira.rest.client.model.PageBeanWorkflowScheme;
import com.xminds.jira.rest.client.model.WorkflowScheme;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowSchemesApi
 */
@Ignore
public class WorkflowSchemesApiTest {

    private final WorkflowSchemesApi api = new WorkflowSchemesApi();

    /**
     * Create workflow scheme
     *
     * Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWorkflowSchemeTest() throws ApiException {
        WorkflowScheme body = null;
        WorkflowScheme response = api.createWorkflowScheme(body);

        // TODO: test validations
    }
    /**
     * Delete default workflow
     *
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira&#x27;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDefaultWorkflowTest() throws ApiException {
        Long id = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.deleteDefaultWorkflow(id, updateDraftIfNeeded);

        // TODO: test validations
    }
    /**
     * Delete issue types for workflow in workflow scheme
     *
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkflowMappingTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean updateDraftIfNeeded = null;
        api.deleteWorkflowMapping(id, workflowName, updateDraftIfNeeded);

        // TODO: test validations
    }
    /**
     * Delete workflow scheme
     *
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkflowSchemeTest() throws ApiException {
        Long id = null;
        api.deleteWorkflowScheme(id);

        // TODO: test validations
    }
    /**
     * Delete workflow for issue type in workflow scheme
     *
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkflowSchemeIssueTypeTest() throws ApiException {
        Long id = null;
        String issueType = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.deleteWorkflowSchemeIssueType(id, issueType, updateDraftIfNeeded);

        // TODO: test validations
    }
    /**
     * Get all workflow schemes
     *
     * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWorkflowSchemesTest() throws ApiException {
        Long startAt = null;
        Integer maxResults = null;
        PageBeanWorkflowScheme response = api.getAllWorkflowSchemes(startAt, maxResults);

        // TODO: test validations
    }
    /**
     * Get default workflow
     *
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultWorkflowTest() throws ApiException {
        Long id = null;
        Boolean returnDraftIfExists = null;
        DefaultWorkflow response = api.getDefaultWorkflow(id, returnDraftIfExists);

        // TODO: test validations
    }
    /**
     * Get issue types for workflows in workflow scheme
     *
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean returnDraftIfExists = null;
        IssueTypesWorkflowMapping response = api.getWorkflow(id, workflowName, returnDraftIfExists);

        // TODO: test validations
    }
    /**
     * Get workflow scheme
     *
     * Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowSchemeTest() throws ApiException {
        Long id = null;
        Boolean returnDraftIfExists = null;
        WorkflowScheme response = api.getWorkflowScheme(id, returnDraftIfExists);

        // TODO: test validations
    }
    /**
     * Get workflow for issue type in workflow scheme
     *
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowSchemeIssueTypeTest() throws ApiException {
        Long id = null;
        String issueType = null;
        Boolean returnDraftIfExists = null;
        IssueTypeWorkflowMapping response = api.getWorkflowSchemeIssueType(id, issueType, returnDraftIfExists);

        // TODO: test validations
    }
    /**
     * Set workflow for issue type in workflow scheme
     *
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setWorkflowSchemeIssueTypeTest() throws ApiException {
        IssueTypeWorkflowMapping body = null;
        Long id = null;
        String issueType = null;
        WorkflowScheme response = api.setWorkflowSchemeIssueType(body, id, issueType);

        // TODO: test validations
    }
    /**
     * Update default workflow
     *
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDefaultWorkflowTest() throws ApiException {
        DefaultWorkflow body = null;
        Long id = null;
        WorkflowScheme response = api.updateDefaultWorkflow(body, id);

        // TODO: test validations
    }
    /**
     * Set issue types for workflow in workflow scheme
     *
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkflowMappingTest() throws ApiException {
        IssueTypesWorkflowMapping body = null;
        String workflowName = null;
        Long id = null;
        WorkflowScheme response = api.updateWorkflowMapping(body, workflowName, id);

        // TODO: test validations
    }
    /**
     * Update workflow scheme
     *
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkflowSchemeTest() throws ApiException {
        WorkflowScheme body = null;
        Long id = null;
        WorkflowScheme response = api.updateWorkflowScheme(body, id);

        // TODO: test validations
    }
}
