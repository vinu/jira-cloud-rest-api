/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.xminds.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * List of project permissions and the projects and issues those permissions grant access to.
 */
@Schema(description = "List of project permissions and the projects and issues those permissions grant access to.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-10T13:09:14.296+05:30[Asia/Kolkata]")
public class BulkProjectPermissionGrants {
  @JsonProperty("permission")
  private String permission = null;

  @JsonProperty("issues")
  private List<Long> issues = new ArrayList<Long>();

  @JsonProperty("projects")
  private List<Long> projects = new ArrayList<Long>();

  public BulkProjectPermissionGrants permission(String permission) {
    this.permission = permission;
    return this;
  }

   /**
   * A project permission,
   * @return permission
  **/
  @Schema(required = true, description = "A project permission,")
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }

  public BulkProjectPermissionGrants issues(List<Long> issues) {
    this.issues = issues;
    return this;
  }

  public BulkProjectPermissionGrants addIssuesItem(Long issuesItem) {
    this.issues.add(issuesItem);
    return this;
  }

   /**
   * IDs of the issues the user has the permission for.
   * @return issues
  **/
  @Schema(required = true, description = "IDs of the issues the user has the permission for.")
  public List<Long> getIssues() {
    return issues;
  }

  public void setIssues(List<Long> issues) {
    this.issues = issues;
  }

  public BulkProjectPermissionGrants projects(List<Long> projects) {
    this.projects = projects;
    return this;
  }

  public BulkProjectPermissionGrants addProjectsItem(Long projectsItem) {
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * IDs of the projects the user has the permission for.
   * @return projects
  **/
  @Schema(required = true, description = "IDs of the projects the user has the permission for.")
  public List<Long> getProjects() {
    return projects;
  }

  public void setProjects(List<Long> projects) {
    this.projects = projects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkProjectPermissionGrants bulkProjectPermissionGrants = (BulkProjectPermissionGrants) o;
    return Objects.equals(this.permission, bulkProjectPermissionGrants.permission) &&
        Objects.equals(this.issues, bulkProjectPermissionGrants.issues) &&
        Objects.equals(this.projects, bulkProjectPermissionGrants.projects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permission, issues, projects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkProjectPermissionGrants {\n");
    
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
