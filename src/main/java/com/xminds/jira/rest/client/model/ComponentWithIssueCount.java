/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.xminds.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Details about a component with a count of the issues it contains.
 */
@Schema(description = "Details about a component with a count of the issues it contains.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-10T13:09:14.296+05:30[Asia/Kolkata]")
public class ComponentWithIssueCount {
  @JsonProperty("issueCount")
  private Long issueCount = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("self")
  private String self = null;

  @JsonProperty("projectId")
  private Long projectId = null;

  @JsonProperty("assignee")
  private AllOfComponentWithIssueCountAssignee assignee = null;

  @JsonProperty("project")
  private String project = null;

  @JsonProperty("lead")
  private AllOfComponentWithIssueCountLead lead = null;

  /**
   * The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
   */
  public enum AssigneeTypeEnum {
    PROJECT_DEFAULT("PROJECT_DEFAULT"),
    COMPONENT_LEAD("COMPONENT_LEAD"),
    PROJECT_LEAD("PROJECT_LEAD"),
    UNASSIGNED("UNASSIGNED");

    private String value;

    AssigneeTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AssigneeTypeEnum fromValue(String text) {
      for (AssigneeTypeEnum b : AssigneeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("assigneeType")
  private AssigneeTypeEnum assigneeType = null;

  @JsonProperty("realAssignee")
  private AllOfComponentWithIssueCountRealAssignee realAssignee = null;

  @JsonProperty("isAssigneeTypeValid")
  private Boolean isAssigneeTypeValid = null;

  /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
   */
  public enum RealAssigneeTypeEnum {
    PROJECT_DEFAULT("PROJECT_DEFAULT"),
    COMPONENT_LEAD("COMPONENT_LEAD"),
    PROJECT_LEAD("PROJECT_LEAD"),
    UNASSIGNED("UNASSIGNED");

    private String value;

    RealAssigneeTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RealAssigneeTypeEnum fromValue(String text) {
      for (RealAssigneeTypeEnum b : RealAssigneeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("realAssigneeType")
  private RealAssigneeTypeEnum realAssigneeType = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("id")
  private String id = null;

   /**
   * Count of issues for the component.
   * @return issueCount
  **/
  @Schema(description = "Count of issues for the component.")
  public Long getIssueCount() {
    return issueCount;
  }

   /**
   * The description for the component.
   * @return description
  **/
  @Schema(description = "The description for the component.")
  public String getDescription() {
    return description;
  }

   /**
   * The URL for this count of the issues contained in the component.
   * @return self
  **/
  @Schema(description = "The URL for this count of the issues contained in the component.")
  public String getSelf() {
    return self;
  }

   /**
   * Not used.
   * @return projectId
  **/
  @Schema(description = "Not used.")
  public Long getProjectId() {
    return projectId;
  }

  public ComponentWithIssueCount assignee(AllOfComponentWithIssueCountAssignee assignee) {
    this.assignee = assignee;
    return this;
  }

   /**
   * The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component.
   * @return assignee
  **/
  @Schema(description = "The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.")
  public AllOfComponentWithIssueCountAssignee getAssignee() {
    return assignee;
  }

  public void setAssignee(AllOfComponentWithIssueCountAssignee assignee) {
    this.assignee = assignee;
  }

   /**
   * The key of the project to which the component is assigned.
   * @return project
  **/
  @Schema(description = "The key of the project to which the component is assigned.")
  public String getProject() {
    return project;
  }

  public ComponentWithIssueCount lead(AllOfComponentWithIssueCountLead lead) {
    this.lead = lead;
    return this;
  }

   /**
   * The user details for the component&#x27;s lead user.
   * @return lead
  **/
  @Schema(description = "The user details for the component's lead user.")
  public AllOfComponentWithIssueCountLead getLead() {
    return lead;
  }

  public void setLead(AllOfComponentWithIssueCountLead lead) {
    this.lead = lead;
  }

   /**
   * The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
   * @return assigneeType
  **/
  @Schema(description = "The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.")
  public AssigneeTypeEnum getAssigneeType() {
    return assigneeType;
  }

  public ComponentWithIssueCount realAssignee(AllOfComponentWithIssueCountRealAssignee realAssignee) {
    this.realAssignee = realAssignee;
    return this;
  }

   /**
   * The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee.
   * @return realAssignee
  **/
  @Schema(description = "The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.")
  public AllOfComponentWithIssueCountRealAssignee getRealAssignee() {
    return realAssignee;
  }

  public void setRealAssignee(AllOfComponentWithIssueCountRealAssignee realAssignee) {
    this.realAssignee = realAssignee;
  }

   /**
   * Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.
   * @return isAssigneeTypeValid
  **/
  @Schema(description = "Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.")
  public Boolean isIsAssigneeTypeValid() {
    return isAssigneeTypeValid;
  }

   /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
   * @return realAssigneeType
  **/
  @Schema(description = "The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.")
  public RealAssigneeTypeEnum getRealAssigneeType() {
    return realAssigneeType;
  }

   /**
   * The name for the component.
   * @return name
  **/
  @Schema(description = "The name for the component.")
  public String getName() {
    return name;
  }

   /**
   * The unique identifier for the component.
   * @return id
  **/
  @Schema(description = "The unique identifier for the component.")
  public String getId() {
    return id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentWithIssueCount componentWithIssueCount = (ComponentWithIssueCount) o;
    return Objects.equals(this.issueCount, componentWithIssueCount.issueCount) &&
        Objects.equals(this.description, componentWithIssueCount.description) &&
        Objects.equals(this.self, componentWithIssueCount.self) &&
        Objects.equals(this.projectId, componentWithIssueCount.projectId) &&
        Objects.equals(this.assignee, componentWithIssueCount.assignee) &&
        Objects.equals(this.project, componentWithIssueCount.project) &&
        Objects.equals(this.lead, componentWithIssueCount.lead) &&
        Objects.equals(this.assigneeType, componentWithIssueCount.assigneeType) &&
        Objects.equals(this.realAssignee, componentWithIssueCount.realAssignee) &&
        Objects.equals(this.isAssigneeTypeValid, componentWithIssueCount.isAssigneeTypeValid) &&
        Objects.equals(this.realAssigneeType, componentWithIssueCount.realAssigneeType) &&
        Objects.equals(this.name, componentWithIssueCount.name) &&
        Objects.equals(this.id, componentWithIssueCount.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueCount, description, self, projectId, assignee, project, lead, assigneeType, realAssignee, isAssigneeTypeValid, realAssigneeType, name, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentWithIssueCount {\n");
    
    sb.append("    issueCount: ").append(toIndentedString(issueCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    assigneeType: ").append(toIndentedString(assigneeType)).append("\n");
    sb.append("    realAssignee: ").append(toIndentedString(realAssignee)).append("\n");
    sb.append("    isAssigneeTypeValid: ").append(toIndentedString(isAssigneeTypeValid)).append("\n");
    sb.append("    realAssigneeType: ").append(toIndentedString(realAssigneeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
