/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.xminds.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Details about the configuration of Jira.
 */
@Schema(description = "Details about the configuration of Jira.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-10T13:09:14.296+05:30[Asia/Kolkata]")
public class ModelConfiguration {
  @JsonProperty("votingEnabled")
  private Boolean votingEnabled = null;

  @JsonProperty("watchingEnabled")
  private Boolean watchingEnabled = null;

  @JsonProperty("unassignedIssuesAllowed")
  private Boolean unassignedIssuesAllowed = null;

  @JsonProperty("subTasksEnabled")
  private Boolean subTasksEnabled = null;

  @JsonProperty("issueLinkingEnabled")
  private Boolean issueLinkingEnabled = null;

  @JsonProperty("timeTrackingEnabled")
  private Boolean timeTrackingEnabled = null;

  @JsonProperty("attachmentsEnabled")
  private Boolean attachmentsEnabled = null;

  @JsonProperty("timeTrackingConfiguration")
  private AllOfConfigurationTimeTrackingConfiguration timeTrackingConfiguration = null;

   /**
   * Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   * @return votingEnabled
  **/
  @Schema(description = "Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.")
  public Boolean isVotingEnabled() {
    return votingEnabled;
  }

   /**
   * Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   * @return watchingEnabled
  **/
  @Schema(description = "Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.")
  public Boolean isWatchingEnabled() {
    return watchingEnabled;
  }

   /**
   * Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   * @return unassignedIssuesAllowed
  **/
  @Schema(description = "Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.")
  public Boolean isUnassignedIssuesAllowed() {
    return unassignedIssuesAllowed;
  }

   /**
   * Whether the ability to create subtasks for issues is enabled.
   * @return subTasksEnabled
  **/
  @Schema(description = "Whether the ability to create subtasks for issues is enabled.")
  public Boolean isSubTasksEnabled() {
    return subTasksEnabled;
  }

   /**
   * Whether the ability to link issues is enabled.
   * @return issueLinkingEnabled
  **/
  @Schema(description = "Whether the ability to link issues is enabled.")
  public Boolean isIssueLinkingEnabled() {
    return issueLinkingEnabled;
  }

   /**
   * Whether the ability to track time is enabled. This property is deprecated.
   * @return timeTrackingEnabled
  **/
  @Schema(description = "Whether the ability to track time is enabled. This property is deprecated.")
  public Boolean isTimeTrackingEnabled() {
    return timeTrackingEnabled;
  }

   /**
   * Whether the ability to add attachments to issues is enabled.
   * @return attachmentsEnabled
  **/
  @Schema(description = "Whether the ability to add attachments to issues is enabled.")
  public Boolean isAttachmentsEnabled() {
    return attachmentsEnabled;
  }

   /**
   * The configuration of time tracking.
   * @return timeTrackingConfiguration
  **/
  @Schema(description = "The configuration of time tracking.")
  public AllOfConfigurationTimeTrackingConfiguration getTimeTrackingConfiguration() {
    return timeTrackingConfiguration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.votingEnabled, _configuration.votingEnabled) &&
        Objects.equals(this.watchingEnabled, _configuration.watchingEnabled) &&
        Objects.equals(this.unassignedIssuesAllowed, _configuration.unassignedIssuesAllowed) &&
        Objects.equals(this.subTasksEnabled, _configuration.subTasksEnabled) &&
        Objects.equals(this.issueLinkingEnabled, _configuration.issueLinkingEnabled) &&
        Objects.equals(this.timeTrackingEnabled, _configuration.timeTrackingEnabled) &&
        Objects.equals(this.attachmentsEnabled, _configuration.attachmentsEnabled) &&
        Objects.equals(this.timeTrackingConfiguration, _configuration.timeTrackingConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(votingEnabled, watchingEnabled, unassignedIssuesAllowed, subTasksEnabled, issueLinkingEnabled, timeTrackingEnabled, attachmentsEnabled, timeTrackingConfiguration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    
    sb.append("    votingEnabled: ").append(toIndentedString(votingEnabled)).append("\n");
    sb.append("    watchingEnabled: ").append(toIndentedString(watchingEnabled)).append("\n");
    sb.append("    unassignedIssuesAllowed: ").append(toIndentedString(unassignedIssuesAllowed)).append("\n");
    sb.append("    subTasksEnabled: ").append(toIndentedString(subTasksEnabled)).append("\n");
    sb.append("    issueLinkingEnabled: ").append(toIndentedString(issueLinkingEnabled)).append("\n");
    sb.append("    timeTrackingEnabled: ").append(toIndentedString(timeTrackingEnabled)).append("\n");
    sb.append("    attachmentsEnabled: ").append(toIndentedString(attachmentsEnabled)).append("\n");
    sb.append("    timeTrackingConfiguration: ").append(toIndentedString(timeTrackingConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
